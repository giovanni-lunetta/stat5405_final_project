---
title: "Predicting NFL Running Back Performance"
author: "Giovanni Lunetta and Sam Lutzel"
format:
  revealjs:
    height: 500
    width: 850 
    embed-resources: true
    slide-number: true
    smaller: true
    scrollable: true
    theme: solarized
#    chalkboard: 
#      buttons: false
    preview-links: auto
#    logo: images/quarto.png
#    css: styles.css
    footer: "UConn Stat-5405"
execute: 
  cache: true
---

## Outline

1. Abstract

2. Goal/Motivation

3. Methods

5. Data

7. Proposal Write-Up

## Abstract

This study utilizes advanced machine learning techniques, specifically Multiple Linear Regression (MLR), Generalized Linear Models (GLM), and XGBoost, to predict yards gained by NFL running backs after a handoff. Employing player tracking data from the 2017 to 2019 seasons, the models will consider player positions, velocities, accelerations, and game context. The goal is to provide actionable insights for team strategy and player utilization, contributing to the field of sports analytics.

## Goal/Motivation

The goal is to develop predictive models that accurately estimate yards gained by a running back after a handoff, aiding team strategies and player evaluations in NFL games.

The motivation for this study is rooted in the increasing relevance of data-driven decisions in sports. By translating player tracking data into actionable insights, this research aims to enhance team performance and contribute to sports analytics.

## Methods

### Multiple Linear Regression (MLR)
For our baseline MLR model, we will use the ordinary least squares (OLS) method to estimate the coefficients of our predictor variables. The model is specified as:

$Y = \beta_0 + \beta_1X_1 + \beta_2X_2 + \ldots + \beta_nX_n + \epsilon$

where $Y$ represents the yards gained after the handoff, $X_i$ are the predictor variables, $\beta_i$ are the coefficients to be estimated, and $\epsilon$ is the error term. We will evaluate the assumptions of linear regression such as linearity, homoscedasticity, independence, and normality of residuals to ensure model validity.

### Generalized Linear Models (GLM)
GLMs will be fitted by selecting a suitable link function and a probability distribution for the response variable (yards gained). For example, if we choose a Poisson distribution, the link function could be the log function, leading to a Poisson regression model suitable for count data. The GLM is given by:

$g(E(Y)) = \eta = X\beta$

where $g(\cdot)$ is the link function, $E(Y)$ is the expected value of our target variable, $\eta$ is the linear predictor, $X$ is the matrix of predictors, and $\beta$ is the vector of coefficients.

### XGBoost
XGBoost will be utilized for its gradient boosting framework, which constructs new models that predict the residuals or errors of prior models and then combines them into the final prediction model. It employs an objective function as follows:

$\text{Obj}(\theta) = L(\theta) + \Omega(\theta)$

where $L$ is the training loss function that measures how predictive our model is with respect to the training data, and $\Omega$ is the regularization term that penalizes model complexity to avoid overfitting. XGBoost uses a quantile loss for regression tasks, which can be defined for the $\tau$-th quantile as:

$$
\rho_{\tau}(y, \hat{y}) = 
\begin{cases} 
\tau (y - \hat{y}) & \text{if } y \geq \hat{y} \\
(1 - \tau) (\hat{y} - y) & \text{if } y < \hat{y}
\end{cases}
$$

The models will be trained using cross-validation to tune hyperparameters and to prevent overfitting. Model performance will be assessed using metrics such as the Mean Squared Error (MSE) for MLR and GLM, and the pseudo $R^2$ for model goodness-of-fit. For XGBoost, we will also monitor the area under the Receiver Operating Characteristic curve (AUC) in classification scenarios or R-squared in regression contexts. Feature importance will be evaluated to identify which variables contribute most to the prediction of yards gained.

### Data Preprocessing
We will perform data preprocessing to clean and prepare the dataset for analysis. This includes imputation for missing values, feature scaling and normalization to ensure that all variables contribute equally to the model, and encoding of categorical variables as necessary. Feature engineering will be crucial to develop new variables that better capture the nuances of the game situations.

All models will be implemented using appropriate statistical software or programming languages like R or Python, with packages or libraries such as `statsmodels` for MLR and GLM, and `xgboost` for the ensemble method. The final models will be validated using a holdout dataset or via k-fold cross-validation to ensure generalizability to unseen data.


## Data

The data is from NFL games played during the 2017, 2018, and the first half of the 2019 seasons.

Each row in the file corresponds to a single player's involvement in a single play. All the columns are contained in one large dataframe which is grouped and provided by PlayId.

Here are the columns:

`GameId` - a unique game identifier

`PlayId` - a unique play identifier

`Team` - home or away

`X` - player position along the long axis of the field. See figure below.

`Y` - player position along the short axis of the field. See figure below.

`S` - speed in yards/second

`A` - acceleration in yards/second^2

`Dis` - distance traveled from prior time point, in yards

`Orientation` - orientation of player (deg)

`Dir` - angle of player motion (deg)

`NflId` - a unique identifier of the player

`DisplayName` - player's name

`JerseyNumber` - jersey number

`Season` - year of the season

`YardLine` - the yard line of the line of scrimmage

`Quarter` - game quarter (1-5, 5 == overtime)

`GameClock` - time on the game clock

`PossessionTeam` - team with possession

`Down` - the down (1-4)

`Distance` - yards needed for a first down

`FieldPosition` - which side of the field the play is happening on

`HomeScoreBeforePlay` - home team score before play started

`VisitorScoreBeforePlay` - visitor team score before play started

`NflIdRusher` - the NflId of the rushing player

`OffenseFormation` - offense formation

`OffensePersonnel` - offensive team positional grouping

`DefendersInTheBox` - number of defenders lined up near the line of scrimmage, spanning the width of the offensive line

`DefensePersonnel` - defensive team positional grouping

`PlayDirection` - direction the play is headed

`TimeHandoff` - UTC time of the handoff

`TimeSnap` - UTC time of the snap

`Yards` - the yardage gained on the play (you are predicting this)

`PlayerHeight` - player height (ft-in)

`PlayerWeight` - player weight (lbs)

`PlayerBirthDate` - birth date (mm/dd/yyyy)

`PlayerCollegeName` - where the player attended college

`Position` - the player's position (the specific role on the field that they typically play)

`HomeTeamAbbr` - home team abbreviation

`VisitorTeamAbbr` - visitor team abbreviation

`Week` - week into the season

`Stadium` - stadium where the game is being played

`Location` - city where the game is being played

`StadiumType` - description of the stadium environment

`Turf` - description of the field surface

`GameWeather` - description of the game weather

`Temperature` - temperature (deg F)

`Humidity` - humidity

`WindSpeed` - wind speed in miles/hour

`WindDirection` - wind direction

There are 682154 rows and 49 columns.

## Proposal Write-Up

A 1-2 page description of what you propose, how you propse to do this, what take-away you expect, and why will this be useful.